@inject IProductService ProductService

@implements IDisposable

<ul class="list-unstyled">
    @foreach (var product in ProductService.Products)
	{
		 <li class="media my-3">
             <div class="media-img-wrapper mr-2">
                 <a href="/product/@product.ID">
                     <img src="@product.ImageLink" class="media-img" alt="@product.Title"/>
                 </a>
             </div>
             <div class="media-body">
                 <a href="/product/@product.ID">
                     <h4 class="mb-4">@product.Title</h4>
                 </a>
                 <p>@product.Descripton</p>
                 
                 <h5 class="price">
                    @GetPriceText(product)
                 </h5>
             </div>
         </li>
	}
</ul>


@code {    
    [Parameter]
    public int? CategoryID { get; set; } = null;

    protected override void OnInitialized()
    {
        //await ProductService.LoadProducts();

        ProductService.OnChange += StateHasChanged;
    }

    public void Dispose()
    {
        ProductService.OnChange -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if(variants.Count ==0)
        {
            return string.Empty;
        }
        else if(variants.Count == 1)
        {
            return $"${variants[0].Price}";
        }

        decimal minPrice = variants.Min(v => v.Price);
        return $"Starting at ${minPrice}";
    }
}
